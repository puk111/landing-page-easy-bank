@use "font-size" as *;
// utilyty classes
@each $sizes, $type in $utulity-sizes {
  @each $prop, $value in $type {
    @if ($sizes == "fs") {
      .#{$sizes}-#{$prop} {
        font-size: $value;
      }
    }
    @if ($sizes == "size") {
      .padding-block-#{$prop} {
        padding-block: $value;
      }
    }
  }
}

.text {
  &-primary {
    &-400 {
      color: var(--clr-primary-100);
    }
  }
  &-neutral {
    &-400 {
      color: var(--clr-neutral-100);
    }
  }
}
.fw {
  &-low {
    font-weight: var(--font-w-low);
  }
  &-normal {
    font-weight: var(--font-w-normal);
  }
  &-bold {
    font-weight: var(--font-w-bold);
  }
}
.fs {
  &--primary-heading {
    font-size: var(--fs-primary-heading);
    line-height: 1.1;
  }
  &--secondary-heading {
    font-size: var(--fs-secondary-heading);
    line-height: 1.1;
  }
}

.bg {
  &--primary {
    &-100 {
      background-color: var(--clr-primary-100);
    }
    &-200 {
      background-color: var(--clr-primary-200);
    }
    &-300 {
      background-color: var(--clr-primary-300);
    }
  }
  &--neutral {
    &-100 {
      background-color: var(--clr-neutral-100);
    }
    &-200 {
      background-color: var(--clr-neutral-200);
    }
    &-300 {
      background-color: var(--clr-neutral-300);
    }
    &-400 {
      background-color: var(--clr-neutral-400);
    }
  }
}

.container {
  --max-width: 1100px;
  --padding: 2rem;

  width: min(var(--max-width), 100% - var(--padding));
  margin-inline: auto;
}

.even-columns {
  display: grid;
  gap: 1rem;
}
.display-sm-none {
  display: none;
}

@media (min-width: 50em) {
  .display-md {
    display: inline-flex;
  }
}

@media (min-width: 50rem) {
  .even-columns {
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
  }
}
// .flow *+* {} to samo
:where(.flow :not(:first-child)) {
  margin-top: var(--flow-spacer, 3rem);
}
